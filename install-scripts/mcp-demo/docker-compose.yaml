# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

x-default-logging: &logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"
    tag: "{{.Name}}"

networks:
  default:
    name: cardinal-mcp-demo
    driver: bridge

services:
  # ******************
  # Core Demo Services
  # ******************

  # AdService
  ad:
    image: ghcr.io/open-telemetry/demo:latest-ad
    container_name: ad
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "9555"
    environment:
      - AD_PORT=9555
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_LOGS_EXPORTER=otlp
      - OTEL_SERVICE_NAME=ad
      # Workaround on OSX for https://bugs.openjdk.org/browse/JDK-8345296
      - _JAVA_OPTIONS
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Cart service
  cart:
    image: ghcr.io/open-telemetry/demo:latest-cart
    container_name: cart
    deploy:
      resources:
        limits:
          memory: 160M
    restart: unless-stopped
    ports:
      - "7070"
    environment:
      - CART_PORT=7070
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - VALKEY_ADDR=valkey-cart:6379
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=cart
      - ASPNETCORE_URLS=http://*:7070
    depends_on:
      valkey-cart:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Checkout service
  checkout:
    image: ghcr.io/open-telemetry/demo:latest-checkout
    container_name: checkout
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "5050"
    environment:
      - CHECKOUT_PORT=5050
      - CART_ADDR=cart:7070
      - CURRENCY_ADDR=currency:7001
      - EMAIL_ADDR=http://email:6060
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - PAYMENT_ADDR=payment:50051
      - PRODUCT_CATALOG_ADDR=product-catalog:3550
      - SHIPPING_ADDR=http://shipping:50050
      - GOMEMLIMIT=16MiB
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=checkout
    depends_on:
      cart:
        condition: service_started
      currency:
        condition: service_started
      email:
        condition: service_started
      payment:
        condition: service_started
      product-catalog:
        condition: service_started
      shipping:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Currency service
  currency:
    image: ghcr.io/open-telemetry/demo:latest-currency
    container_name: currency
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "7001"
    environment:
      - CURRENCY_PORT=7001
      - VERSION=2.1.3
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=currency
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Email service
  email:
    image: ghcr.io/open-telemetry/demo:latest-email
    container_name: email
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    ports:
      - "6060"
    environment:
      - APP_ENV=production
      - EMAIL_PORT=6060
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=email
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Frontend
  frontend:
    image: ghcr.io/open-telemetry/demo:latest-frontend
    container_name: frontend
    deploy:
      resources:
        limits:
          memory: 250M
    restart: unless-stopped
    ports:
      - "8080"
    environment:
      - PORT=8080
      - FRONTEND_ADDR=frontend:8080
      - AD_ADDR=ad:9555
      - CART_ADDR=cart:7070
      - CHECKOUT_ADDR=checkout:5050
      - CURRENCY_ADDR=currency:7001
      - PRODUCT_CATALOG_ADDR=product-catalog:3550
      - RECOMMENDATION_ADDR=recommendation:9001
      - SHIPPING_ADDR=http://shipping:50050
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - ENV_PLATFORM=local
      - OTEL_SERVICE_NAME=frontend
      - PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://localhost:8080/otlp-http/v1/traces
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - WEB_OTEL_SERVICE_NAME=frontend-web
      - OTEL_COLLECTOR_HOST=otel-collector
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
    depends_on:
      ad:
        condition: service_started
      cart:
        condition: service_started
      checkout:
        condition: service_started
      currency:
        condition: service_started
      product-catalog:
        condition: service_started
      quote:
        condition: service_started
      recommendation:
        condition: service_started
      shipping:
        condition: service_started
      otel-collector:
        condition: service_started
      image-provider:
        condition: service_started
    logging: *logging

  # Frontend Proxy (Envoy)
  frontend-proxy:
    image: ghcr.io/open-telemetry/demo:latest-frontend-proxy
    container_name: frontend-proxy
    deploy:
      resources:
        limits:
          memory: 65M
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "10000:10000"
    environment:
      - FRONTEND_PORT=8080
      - FRONTEND_HOST=frontend
      - LOCUST_WEB_HOST=load-generator
      - LOCUST_WEB_PORT=8089
      - GRAFANA_PORT=3000
      - GRAFANA_HOST=grafana
      - JAEGER_UI_PORT=16686
      - JAEGER_HOST=jaeger
      - OTEL_COLLECTOR_HOST=otel-collector
      - IMAGE_PROVIDER_HOST=image-provider
      - IMAGE_PROVIDER_PORT=8081
      - OTEL_COLLECTOR_PORT_GRPC=4317
      - OTEL_COLLECTOR_PORT_HTTP=4318
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=frontend-proxy
      - ENVOY_PORT=8080
      - ENVOY_ADMIN_PORT=10000
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - FLAGD_UI_HOST=flagd-ui
      - FLAGD_UI_PORT=4000
    depends_on:
      frontend:
        condition: service_started
      load-generator:
        condition: service_started
      # jaeger:
      #   condition: service_started
      grafana:
        condition: service_healthy
    dns_search: ""

  # image-provider
  image-provider:
    image: ghcr.io/open-telemetry/demo:latest-image-provider
    container_name: image-provider
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "8081"
    environment:
      - IMAGE_PROVIDER_PORT=8081
      - OTEL_COLLECTOR_HOST=otel-collector
      - OTEL_COLLECTOR_PORT_GRPC=4317
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=image-provider
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Load Generator
  load-generator:
    image: ghcr.io/open-telemetry/demo:latest-load-generator
    container_name: load-generator
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "8089"
    environment:
      - LOCUST_WEB_PORT=8089
      - LOCUST_USERS=5
      - LOCUST_HOST=http://frontend-proxy:8080
      - LOCUST_HEADLESS=false
      - LOCUST_AUTOSTART=true
      - LOCUST_BROWSER_TRAFFIC_ENABLED=false
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=load-generator
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      - LOCUST_WEB_HOST=0.0.0.0
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - FLAGD_OFREP_PORT=8016
    depends_on:
      frontend:
        condition: service_started
      flagd:
        condition: service_started
    logging: *logging

  # Payment service
  payment:
    image: ghcr.io/open-telemetry/demo:latest-payment
    container_name: payment
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "50051"
    environment:
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - PAYMENT_PORT=50051
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=payment
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Product Catalog service
  product-catalog:
    image: ghcr.io/open-telemetry/demo:latest-product-catalog
    container_name: product-catalog
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "3550"
    environment:
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - PRODUCT_CATALOG_PORT=3550
      - PRODUCT_CATALOG_RELOAD_INTERVAL=10
      - GOMEMLIMIT=16MiB
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=product-catalog
    volumes:
      - ./otel-src/product-catalog/products:/usr/src/app/products
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Quote service
  quote:
    image: ghcr.io/open-telemetry/demo:latest-quote
    container_name: quote
    deploy:
      resources:
        limits:
          memory: 40M
    restart: unless-stopped
    ports:
      - "8090"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - QUOTE_PORT=8090
      - OTEL_PHP_INTERNAL_METRICS_ENABLED=true
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=quote
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # Recommendation service
  recommendation:
    image: ghcr.io/open-telemetry/demo:latest-recommendation
    container_name: recommendation
    deploy:
      resources:
        limits:
          memory: 50M
    restart: unless-stopped
    ports:
      - "9001"
    environment:
      - FLAGD_HOST=flagd
      - FLAGD_PORT=8013
      - RECOMMENDATION_PORT=9001
      - PRODUCT_CATALOG_ADDR=product-catalog:3550
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=recommendation
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    depends_on:
      product-catalog:
        condition: service_started
      otel-collector:
        condition: service_started
    logging: *logging

  # Shipping service
  shipping:
    image: ghcr.io/open-telemetry/demo:latest-shipping
    container_name: shipping
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "50050"
    environment:
      - SHIPPING_PORT=50050
      - QUOTE_ADDR=http://quote:8090
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=shipping
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE=cumulative
    healthcheck:
      test: ["CMD-SHELL", "timeout 1 bash -c '>/dev/tcp/localhost/50050'"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    depends_on:
      otel-collector:
        condition: service_started
    logging: *logging

  # ******************
  # Dependent Services
  # ******************
  # Flagd, feature flagging service
  flagd:
    image: ghcr.io/open-feature/flagd:v0.12.8
    container_name: flagd
    deploy:
      resources:
        limits:
          memory: 75M
    environment:
      - FLAGD_OTEL_COLLECTOR_URI=otel-collector:4317
      - FLAGD_METRICS_EXPORTER=otel
      - GOMEMLIMIT=60MiB
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=flagd
      - BOB
    command: [
      "start",
      "--uri",
      "file:./etc/flagd/demo.flagd.json"
    ]
    ports:
      - "8013"
      - "8016"
    volumes:
      - ./otel-src/flagd:/etc/flagd
    logging:
      *logging

  # Valkey used by Cart service
  valkey-cart:
    image: valkey/valkey:8.1.3-alpine
    container_name: valkey-cart
    user: valkey
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "6379"
    logging: *logging

  # OpenTelemetry Collector
  otel-collector:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.133.0
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml" ]
    user: 0:0
    volumes:
      - ./otel-src/otel-collector/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "4317"
      - "4318"
    # depends_on:
    #   jaeger:
    #     condition: service_started
    #   opensearch:
    #     condition: service_healthy
    logging: *logging
    environment:
      - FRONTEND_PROXY_ADDR=frontend-proxy:8080
      - IMAGE_PROVIDER_HOST=image-provider
      - IMAGE_PROVIDER_PORT=8081
      - HOST_FILESYSTEM=/
      - OTEL_COLLECTOR_HOST=otel-collector
      - OTEL_COLLECTOR_PORT_GRPC=4317
      - OTEL_COLLECTOR_PORT_HTTP=4318
      - POSTGRES_HOST=postgresql
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=otel
      - LAKERUNNER_CARDINAL_APIKEY=${LAKERUNNER_CARDINAL_APIKEY}
      - GOMEMLIMIT=160MiB

  # Chip MCP, by Cardinal HQ
  chip-mcp:
    image: public.ecr.aws/cardinalhq.io/chip-mcp:latest
    container_name: chip-mcp
    depends_on:
      grafana-bootstrap:
        condition: service_completed_successfully
    ports:
      - "3001:3001"
    volumes:
      - shared-tokens:/tmp/tokens:ro
    environment:
      - GRAFANA_SERVICE_ACCOUNT_TOKEN_FILE=/tmp/tokens/grafana-service-account-token
      - LAKERUNNER_CARDINAL_APIKEY=${LAKERUNNER_CARDINAL_APIKEY:-}

  # Grafana - Following LakeRunner approach
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 256M
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_HTTP_PORT=3000
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_INSTALL_PLUGINS=https://github.com/cardinalhq/cardinalhq-lakerunner-datasource/releases/download/v1.2.0-rc.18/cardinalhq-lakerunner-datasource.zip;cardinalhq-lakerunner-datasource
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s
      - LAKERUNNER_CARDINAL_APIKEY=${LAKERUNNER_CARDINAL_APIKEY}
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=opentelemetry-demo,service.version=2.1.3
      - OTEL_SERVICE_NAME=grafana
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging

  # Grafana Bootstrap Service - Creates service account and token
  grafana-bootstrap:
    image: alpine:latest
    container_name: grafana-bootstrap
    deploy:
      resources:
        limits:
          memory: 50M
    depends_on:
      grafana:
        condition: service_healthy
    volumes:
      - ./init-grafana.sh:/init-grafana.sh:ro
      - shared-tokens:/tmp/tokens
    command: sh -c "apk add --no-cache curl jq && mkdir -p /tmp/tokens && cp /init-grafana.sh /tmp/init-grafana.sh && chmod +x /tmp/init-grafana.sh && /tmp/init-grafana.sh"
    restart: "no"
    environment:
      - GRAFANA_HOST=grafana:3000
      - GRAFANA_USER=admin
      - GRAFANA_PASS=admin
      - GRAFANA_SA_NAME=chip
      - GRAFANA_TOKEN_NAME=chip-token
    logging: *logging

volumes:
  grafana-storage: {}
  shared-tokens: {}
