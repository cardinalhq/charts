# Makefile for LakeRunner Helm Chart Testing

CHART_NAME := lakerunner
TEST_RELEASE_NAME := test-release

.PHONY: help test lint template unittest clean

help:  ## Show this help message
	@echo "Available targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

test: lint template unittest  ## Run all tests (Layer 1 + Layer 2)

lint:  ## Run helm lint on the chart
	@echo "üîç Linting $(CHART_NAME) chart..."
	helm lint .

template:  ## Test template rendering with various configurations
	@echo "üé® Testing template rendering..."
	@echo "  ‚Üí Default configuration"
	helm template $(TEST_RELEASE_NAME) . --debug --dry-run > /dev/null
	@echo "  ‚Üí With global tag override"
	helm template $(TEST_RELEASE_NAME) . --set global.image.tag=v1.2.3 --debug --dry-run > /dev/null
	@echo "  ‚Üí With disabled components"
	helm template $(TEST_RELEASE_NAME) . --set queryApi.enabled=false --set grafana.enabled=false --debug --dry-run > /dev/null
	@echo "  ‚Üí With air-gapped Grafana plugin"
	helm template $(TEST_RELEASE_NAME) . --set grafana.cardinalPlugin.url="https://internal.example.com/plugin.zip;cardinalhq-lakerunner-datasource" --debug --dry-run > /dev/null
	@echo "  ‚Üí With additional Grafana plugins"
	helm template $(TEST_RELEASE_NAME) . --set grafana.additionalPlugins="grafana-clock-panel" --debug --dry-run > /dev/null
	@echo "  ‚Üí With custom scaling"
	helm template $(TEST_RELEASE_NAME) . --set queryApi.replicas=3 --set ingestLogs.replicas=5 --debug --dry-run > /dev/null

unittest:  ## Run helm unittest tests
	@echo "üß™ Running unit tests..."
	helm unittest .

clean:  ## Clean up test artifacts
	@echo "üßπ Cleaning up test artifacts..."
	rm -f *.tgz
	rm -rf charts/

# Development helpers
template-debug:  ## Render templates and show output for debugging
	@echo "üîç Rendering templates for debugging..."
	helm template $(TEST_RELEASE_NAME) . --debug

template-save:  ## Save rendered templates to file for inspection
	@echo "üíæ Saving rendered templates to $(CHART_NAME)-rendered.yaml..."
	helm template $(TEST_RELEASE_NAME) . > $(CHART_NAME)-rendered.yaml
	@echo "Templates saved to $(CHART_NAME)-rendered.yaml"

test-with-values:  ## Test with custom values file (usage: make test-with-values VALUES_FILE=my-values.yaml)
ifndef VALUES_FILE
	@echo "‚ùå Please specify VALUES_FILE=<path-to-values-file>"
	@exit 1
endif
	@echo "üé® Testing with custom values file: $(VALUES_FILE)"
	helm lint . --values $(VALUES_FILE)
	helm template $(TEST_RELEASE_NAME) . --values $(VALUES_FILE) --debug --dry-run > /dev/null
	@echo "‚úÖ Template rendering successful with $(VALUES_FILE)"