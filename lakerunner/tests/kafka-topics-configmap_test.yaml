suite: test kafka topics configmap
values:
  - ../values.yaml
set:
  kafkaTopics.create: true
templates:
  - kafka-setup-configmap.yaml
tests:
  # Test ConfigMap creation with default structure
  - it: should create configmap with kafka topics configuration
    asserts:
      - isKind:
          of: ConfigMap
      - equal:
          path: metadata.name
          value: RELEASE-NAME-lakerunner-kafka-topics
      - exists:
          path: data["kafka_topics.yaml"]
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "name: lakerunner\\.objstore\\.ingest\\.logs"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "partitionCount: 16"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "replicationFactor: 2"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: 'cleanup\.policy: delete'

  # Test ConfigMap not created when create is false
  - it: should not create configmap when create is false
    set:
      kafkaTopics.create: false
    asserts:
      - hasDocuments:
          count: 0

  # Test that config structure is preserved exactly
  - it: should preserve exact kafka topics config structure
    set:
      kafkaTopics.config:
        defaults:
          partitionCount: 8
          replicationFactor: 3
        topics:
          - name: test.topic.custom
            partitionCount: 12
    asserts:
      - isKind:
          of: ConfigMap
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "partitionCount: 8"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "replicationFactor: 3"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "name: test\\.topic\\.custom"
      - matchRegex:
          path: data["kafka_topics.yaml"]
          pattern: "partitionCount: 12"