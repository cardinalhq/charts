suite: test duckdb inject configuration
values:
  - ../values.yaml
set:
  cloudProvider.aws.region: us-west-2
  queryWorker.enabled: true
templates:
  - query-worker-v2-deployment.yaml
  - duckdb-credentials-secret.yaml
tests:
  # Test DuckDB credentials injection enabled (default behavior)
  - it: should inject duckdb credentials when inject is true (default)
    set:
      cloudProvider.duckdb.secretName: "test-duckdb-secret"
      cloudProvider.duckdb.inject: true
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test DuckDB credentials injection disabled
  - it: should not inject duckdb credentials when inject is false
    set:
      cloudProvider.duckdb.secretName: "test-duckdb-secret"
      cloudProvider.duckdb.inject: false
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test backward compatibility - when duckdb config exists, defaults to inject: true
  - it: should inject duckdb credentials with backward compatibility when inject not specified
    set:
      cloudProvider.duckdb.secretName: "test-duckdb-secret"
      # inject defaults to true in values.yaml
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test when duckdb section is completely missing
  - it: should not inject duckdb credentials when duckdb config is missing
    set:
      cloudProvider.duckdb: null
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test when duckdb section is empty
  - it: should not inject duckdb credentials when duckdb config is empty
    set:
      cloudProvider.duckdb: {}
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test secret creation is independent of inject flag
  - it: should create duckdb secret when create is true regardless of inject flag
    set:
      cloudProvider.duckdb.secretName: "duckdb-credentials"
      cloudProvider.duckdb.create: true
      cloudProvider.duckdb.inject: false
      cloudProvider.duckdb.accessKeyId: "test-access-key"
      cloudProvider.duckdb.secretAccessKey: "test-secret-key"
    templates:
      - duckdb-credentials-secret.yaml
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-lakerunner-duckdb-credentials
      - equal:
          path: data.S3_ACCESS_KEY_ID
          value: dGVzdC1hY2Nlc3Mta2V5 # base64 encoded "test-access-key"
      - equal:
          path: data.S3_SECRET_ACCESS_KEY
          value: dGVzdC1zZWNyZXQta2V5 # base64 encoded "test-secret-key"

  # Test using existing secret with inject disabled
  - it: should not inject existing duckdb secret when inject is false
    set:
      cloudProvider.duckdb.create: false
      cloudProvider.duckdb.inject: false
      cloudProvider.duckdb.secretName: "existing-duckdb-secret"
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: existing-duckdb-secret

  # Test using existing secret with inject enabled
  - it: should inject existing duckdb secret when inject is true
    set:
      cloudProvider.duckdb.create: false
      cloudProvider.duckdb.inject: true
      cloudProvider.duckdb.secretName: "existing-duckdb-secret"
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: existing-duckdb-secret

  # Test that cloud provider credentials and duckdb work independently
  - it: should inject both cloud provider and duckdb credentials when both enabled
    set:
      cloudProvider.provider: "aws"
      cloudProvider.aws.inject: true
      cloudProvider.duckdb.inject: true
      cloudProvider.duckdb.secretName: "test-duckdb-secret"
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: aws-credentials
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret

  # Test that cloud provider disabled, duckdb enabled works
  - it: should inject only duckdb credentials when cloud provider disabled and duckdb enabled
    set:
      cloudProvider.provider: "aws"
      cloudProvider.aws.inject: false
      cloudProvider.duckdb.inject: true
      cloudProvider.duckdb.secretName: "test-duckdb-secret"
    templates:
      - query-worker-v2-deployment.yaml
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: aws-credentials
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: test-duckdb-secret