suite: test credentials configuration
values:
  - ../values.yaml
set:
  aws.region: us-west-2
templates:
  - aws-credentials-secret.yaml
  - gcp-credentials-secret.yaml
  - pubsub-sqs-deployment.yaml
  - pubsub-gcp-deployment.yaml
  - query-api-statefulset.yaml
tests:
  # AWS Credentials Secret Tests
  - it: should create AWS credentials secret when aws.create is true
    set:
      aws.create: true
      aws.secretName: "test-aws-creds"
      aws.accessKeyId: "test-key-id"
      aws.secretAccessKey: "test-secret-key"
    templates:
      - aws-credentials-secret.yaml
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-lakerunner-test-aws-creds
      - equal:
          path: data.AWS_ACCESS_KEY_ID
          value: "dGVzdC1rZXktaWQ="  # base64 of "test-key-id"
      - equal:
          path: data.AWS_SECRET_ACCESS_KEY
          value: "dGVzdC1zZWNyZXQta2V5"  # base64 of "test-secret-key"

  - it: should not create AWS credentials secret when aws.create is false
    set:
      aws.create: false
    templates:
      - aws-credentials-secret.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: should use existing AWS secret name when aws.create is false
    set:
      aws.create: false
      aws.secretName: "existing-aws-secret"
      pubsub.SQS.enabled: true
      pubsub.SQS.queueURL: "https://sqs.us-east-2.amazonaws.com/123456789012/test-queue"
    templates:
      - pubsub-sqs-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: existing-aws-secret

  # GCP Credentials Secret Tests
  - it: should create GCP credentials secret when gcp.create is true
    set:
      gcp.create: true
      gcp.secretName: "test-gcp-creds"
      gcp.GOOGLE_APPLICATION_CREDENTIALS: '{"type":"service_account","project_id":"test-project"}'
    templates:
      - gcp-credentials-secret.yaml
    asserts:
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: RELEASE-NAME-lakerunner-test-gcp-creds
      - equal:
          path: data.GOOGLE_APPLICATION_CREDENTIALS
          value: "eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6InRlc3QtcHJvamVjdCJ9"  # base64 of JSON

  - it: should not create GCP credentials secret when gcp.create is false
    set:
      gcp.create: false
    templates:
      - gcp-credentials-secret.yaml
    asserts:
      - hasDocuments:
          count: 0

  - it: should use existing GCP secret name when gcp.create is false
    set:
      gcp.create: false
      gcp.secretName: "existing-gcp-secret"
      pubsub.GCP.enabled: true
      pubsub.GCP.projectID: "test-project"
      pubsub.GCP.subscriptionID: "test-subscription"
    templates:
      - pubsub-gcp-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: existing-gcp-secret

  # AWS Injection Control Tests
  - it: should inject AWS credentials when aws.inject is true
    set:
      aws.inject: true
      aws.secretName: "aws-creds"
      pubsub.SQS.enabled: true
      pubsub.SQS.queueURL: "https://sqs.us-east-2.amazonaws.com/123456789012/test-queue"
    templates:
      - pubsub-sqs-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: aws-creds

  - it: should not inject AWS credentials when aws.inject is false
    set:
      aws.inject: false
      pubsub.SQS.enabled: true
      pubsub.SQS.queueURL: "https://sqs.us-east-2.amazonaws.com/123456789012/test-queue"
    templates:
      - pubsub-sqs-deployment.yaml
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].envFrom

  # GCP Injection Control Tests
  - it: should inject GCP credentials when gcp.inject is true
    set:
      gcp.inject: true
      gcp.secretName: "gcp-creds"
      pubsub.GCP.enabled: true
      pubsub.GCP.projectID: "test-project"
      pubsub.GCP.subscriptionID: "test-subscription"
    templates:
      - pubsub-gcp-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: gcp-creds

  - it: should not inject GCP credentials when gcp.inject is false
    set:
      gcp.inject: false
      pubsub.GCP.enabled: true
      pubsub.GCP.projectID: "test-project"
      pubsub.GCP.subscriptionID: "test-subscription"
    templates:
      - pubsub-gcp-deployment.yaml
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].envFrom

  # Secret Name Helper Tests
  - it: should generate prefixed secret name when create is true
    set:
      aws.create: true
      aws.secretName: "my-aws-secret"
      pubsub.SQS.enabled: true
      pubsub.SQS.queueURL: "https://sqs.us-east-2.amazonaws.com/123456789012/test-queue"
    templates:
      - pubsub-sqs-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: RELEASE-NAME-lakerunner-my-aws-secret

  - it: should use exact secret name when create is false
    set:
      aws.create: false
      aws.secretName: "external-aws-secret"
      pubsub.SQS.enabled: true
      pubsub.SQS.queueURL: "https://sqs.us-east-2.amazonaws.com/123456789012/test-queue"
    templates:
      - pubsub-sqs-deployment.yaml
    asserts:
      - contains:
          path: spec.template.spec.containers[0].envFrom
          content:
            secretRef:
              name: external-aws-secret