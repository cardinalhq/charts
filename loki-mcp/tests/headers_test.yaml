suite: test loki headers configuration
templates:
  - deployment.yaml
  - loki-config-secret.yaml
tests:
  # Secret tests
  - it: should create loki-config secret with LOKI_URL
    template: loki-config-secret.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: metadata.name
          value: RELEASE-NAME-loki-mcp-loki-config
      - equal:
          path: stringData.LOKI_URL
          value: "http://loki.example.com:3100"

  - it: should include headers in loki-config secret
    template: loki-config-secret.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      loki.headers:
        X-Scope-OrgID: "tenant-123"
        Authorization: "Bearer my-token"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: stringData.LOKI_URL
          value: "http://loki.example.com:3100"
      - equal:
          path: stringData.LOKI_HEADER_X_SCOPE_ORGID
          value: "tenant-123"
      - equal:
          path: stringData.LOKI_HEADER_AUTHORIZATION
          value: "Bearer my-token"

  - it: should convert header names to uppercase with underscores in secret
    template: loki-config-secret.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      loki.headers:
        X-Custom-Header: "custom-value"
        content-type: "application/json"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: stringData.LOKI_HEADER_X_CUSTOM_HEADER
          value: "custom-value"
      - equal:
          path: stringData.LOKI_HEADER_CONTENT_TYPE
          value: "application/json"

  - it: should include lakerunner API host in secret when configured
    template: loki-config-secret.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      lakerunner.apiHost: "lakerunner:8080"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: stringData.LAKERUNNER_API_HOST
          value: "lakerunner:8080"

  - it: should not include lakerunner API host in secret when not configured
    template: loki-config-secret.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      cardinal.apiKey: "test-key"
    asserts:
      - notExists:
          path: stringData.LAKERUNNER_API_HOST

  # Deployment tests
  - it: should use envFrom to load loki-config secret
    template: deployment.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].secretRef.name
          value: RELEASE-NAME-loki-mcp-loki-config

  - it: should still load CARDINALHQ_API_KEY from separate secret
    template: deployment.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      cardinal.apiKey: "test-key"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: CARDINALHQ_API_KEY
      - equal:
          path: spec.template.spec.containers[0].env[0].valueFrom.secretKeyRef.name
          value: RELEASE-NAME-loki-mcp-cardinal-api-key
      - equal:
          path: spec.template.spec.containers[0].env[0].valueFrom.secretKeyRef.key
          value: CARDINALHQ_API_KEY

  - it: should not have individual LOKI_* env variables in deployment
    template: deployment.yaml
    set:
      loki.url: "http://loki.example.com:3100"
      loki.headers:
        X-Scope-OrgID: "tenant-123"
      cardinal.apiKey: "test-key"
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: LOKI_URL
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: LOKI_HEADER_X_SCOPE_ORGID
